#!/usr/bin/env python3
# -*- encoding: utf-8 -*-
# file: BlenderVR

## Copyright (C) LIMSI-CNRS (2014)
##
## contributor(s) : Jorge Gascon, Damien Touraine, David Poirier-Quinot,
## Laurent Pointal, Julian Adenauer,
##
## This software is a computer program whose purpose is to distribute
## blender to render on Virtual Reality device systems.
##
## This software is governed by the CeCILL  license under French law and
## abiding by the rules of distribution of free software.  You can  use,
## modify and/ or redistribute the software under the terms of the CeCILL
## license as circulated by CEA, CNRS and INRIA at the following URL
## "http://www.cecill.info".
##
## As a counterpart to the access to the source code and  rights to copy,
## modify and redistribute granted by the license, users are provided only
## with a limited warranty  and the software's author,  the holder of the
## economic rights,  and the successive licensors  have only  limited
## liability.
##
## In this respect, the user's attention is drawn to the risks associated
## with loading,  using,  modifying and/or developing or reproducing the
## software by the user in light of its specific status of free software,
## that may mean  that it is complicated to manipulate,  and  that  also
## therefore means  that it is reserved for developers  and  experienced
## professionals having in-depth computer knowledge. Users are therefore
## encouraged to load and test the software's suitability as regards their
## requirements in conditions enabling the security of their systems and/or
## data to be ensured and,  more generally, to use and operate it in the
## same conditions as regards security.
##
## The fact that you are presently reading this means that you have had
## knowledge of the CeCILL license and that you accept its terms.
##

"""
Daemon
******

This script runs in the clients and is responsible for spawning the
Blender Player.

Using the BlenderVR root (relative to this script dir or given via
command line), it setup the Python PATH to make blendervr package (
from modules subdir) available,

*Important*: it store the ``BlenderVR_root`` variable inside builtins, so that
all scripts can access it.

Then it import BlenderVR module from utils directory and start its
main() function.
"""
import sys
import os
import builtins

if sys.platform.startswith("win"):
    path = os.path.join(os.environ['APPDATA'])
elif sys.platform == 'darwin':
    path = os.path.join(os.path.expanduser('~'), 'Library',
                                        'Application Support')
else: # Unix ...
    path = os.path.join(os.path.expanduser('~'), '.config')
path = os.path.join(path, 'blender')

if not os.path.isdir(path): os.makedirs(path)

profile_file = os.path.join(path, 'vr', 'profile_1.0.pickle')

builtins.BlenderVR_profilePath = os.path.join(path, 'vr', 'modules')
if not os.path.isdir(BlenderVR_profilePath): os.makedirs(BlenderVR_profilePath)

def isValidRoot(root):
    """Check if a given path is valid as BlenderVR root.

    This is done by searching a 'modules' subdirectory within that path
    (this modules which contains the blendervr Python package)

    :param root: path to test
    :type root: str
    :return: boolean indicator that path is valid
    :rtype: bool
    """
    if root is None:
        return False
    return os.path.isdir(os.path.join(root, 'modules'))

# Prepare command-line arguments parsing, then parse it.
import argparse
parser = argparse.ArgumentParser()
parser.add_argument("--version", dest="d_version",
                    help="Current version of blender player",
                    action="store_true", default=False)
parser.add_argument("--BlenderVR-root", dest="BlenderVR_root",
                    help="Modify the BlenderVR root")
parser.add_argument("--display-console", dest="dis_console",
                    help="Display current configuration of the console",
                    action="store_true", default=False)
parser.add_argument("--delete-console", dest="del_console",
                    help="Delete current configuration of the console",
                    action="store_true", default=False)

#Start in console mode. Gives you more control, but requires more user intervention.
parser.add_argument("--start-in-console", dest="console_mode",
                    help="Start BlenderVR in the terminal",
                    action="store_true", default=False)


#Start the blenderplayer with only one command (Pretty useful for the YURT and on-the-fly rendering)
subparsers = parser.add_subparsers(dest='launch')
start = subparsers.add_parser("start")
start.add_argument("-configuration", dest='config', required=True, help="Configuration File", default=None)
start.add_argument("-screen", dest='screen', required=True, help="Screen set name", default=None)
start.add_argument("-blend", dest='blender_file', required=True, help="blender File location", default=None)
start.add_argument("-processor", dest='processor_file', required=True, help="Processor file location", default=None)
start.add_argument("-log", dest='log', help="Log to desired file", default=None)

"""
Start using an xml profile. Basically the same as the "Start the blenderplayer with only one command", but it lets you
save the options for different applications in xml files making the command simpler and more easy for the users.

Example, instead of writing start with 4 argument, you only write start-xml with one argument(the location of the xml file)
and you don't have to worry about mispelling or pointing at the right files everytime, becuase it is already set up in the
xml file. Convenient way to run standalone applications. See an example under source/samples/profile_spider.xml
"""
xml_ = subparsers.add_parser("start-xml")
xml_.add_argument("-start", dest="launch_xml", help="Start from xml file", default=None, required=True)
xml_.add_argument("-screen", dest="screen_o", help="Use other screen but the default", default=None)
xml_.add_argument("-log", dest='log', help="Log to desired file", default=None)


environments = parser.parse_args(sys.argv[1:])

root = None

# Is BlenderVR_root given on command line ?
if environments.BlenderVR_root is not None:
    root= environments.BlenderVR_root

# Use our container directory as root.
if not isValidRoot(root):
    root = os.path.dirname(os.path.realpath(__file__))

# Is root available in profile file ?
if not isValidRoot(root):
    try:
        import pickle
        with open(profile_file, 'rb') as node:
            configuration = pickle.load(node)
        if 'root' in configuration:
            root = configuration['root']
    except:
        pass


# Without root, we cannot start.
if not isValidRoot(root):
    print('Cannot find BlenderVR root !')
    print('Try adding --BlenderVR-root option to BlenderVR (' + sys.argv[0]
            + ' --BlenderVR-root="path") !')
    sys.exit()

# IMPORTANT !
# Modify all scripts environment by inserting a new builtin name.
builtins.BlenderVR_root = root

# Start main() function from utils/blendervr.py module.
try:
    import imp
    (fileobj, file_name, data) = imp.find_module('console',
                                        [os.path.join(root, 'utils')])
    module = imp.load_module('console', fileobj, file_name, data)
    module.main()
except SystemExit:
    pass
except:
    import traceback
    traceback.print_exc()

    print('Cannot find BlenderVR root !')
    print('Try adding --BlenderVR-root option to BlenderVR (' + sys.argv[0]
            + ' --BlenderVR-root="path") !')
    sys.exit()
